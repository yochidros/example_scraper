{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"cssparser","disambiguator":[13662969872637669591,7940495331342817119]},"crate_root":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src","external_crates":[{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11381577622635992493,17547473659604595133]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18108793355192929380,16468545247463735764]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11904953375042280309,14371983540252725821]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[1355694319277426326,16064730418872223952]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[16554292665456805706,897773524803637406]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9247162154814293369,8568939183132890470]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10008762999642871283,544601977840758240]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[15792583605743683862,4433965399607837619]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[10940074420694136997,2824510269351905908]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":10,"id":{"name":"dtoa_short","disambiguator":[17520648005589753449,15338773526507320316]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":11,"id":{"name":"dtoa","disambiguator":[4352890430784014073,10489184677397882802]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":12,"id":{"name":"itoa","disambiguator":[10338459135808299727,15529164411296864777]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":13,"id":{"name":"cssparser_macros","disambiguator":[14537516060931224588,11147824874905425202]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":14,"id":{"name":"matches","disambiguator":[16133711031286202275,10640206718753172983]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":15,"id":{"name":"procedural_masquerade","disambiguator":[1874120643865845990,8599335062076104628]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":16,"id":{"name":"phf","disambiguator":[3958061031745666782,3265454838748679627]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":17,"id":{"name":"phf_shared","disambiguator":[8787078988611979107,5752934132453335837]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":18,"id":{"name":"siphasher","disambiguator":[7794810670545133687,3171846764117487825]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":19,"id":{"name":"unicase","disambiguator":[12216969413000535002,1204026841902131551]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","num":20,"id":{"name":"smallvec","disambiguator":[1968856073852106193,10430422440899907115]}}],"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":206,"byte_end":4347,"line_start":5,"line_end":127,"column_start":1,"column_end":32}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2872,"byte_end":2873,"line_start":84,"line_end":84,"column_start":27,"column_end":28},"name":"*","value":"cssparser_internal__assert_ascii_lowercase__max_len, cssparser_internal__max_len, cssparser_internal__phf_map","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1024},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2896,"byte_end":2901,"line_start":86,"line_end":86,"column_start":21,"column_end":26},"name":"Token","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1062},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2903,"byte_end":2917,"line_start":86,"line_end":86,"column_start":28,"column_end":42},"name":"SourcePosition","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1100},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2919,"byte_end":2933,"line_start":86,"line_end":86,"column_start":44,"column_end":58},"name":"SourceLocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":162},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2969,"byte_end":2984,"line_start":87,"line_end":87,"column_start":34,"column_end":49},"name":"parse_important","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3020,"byte_end":3037,"line_start":88,"line_end":88,"column_start":34,"column_end":51},"name":"DeclarationParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":202},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3039,"byte_end":3060,"line_start":88,"line_end":88,"column_start":53,"column_end":74},"name":"DeclarationListParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3062,"byte_end":3083,"line_start":88,"line_end":88,"column_start":76,"column_end":97},"name":"parse_one_declaration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3119,"byte_end":3133,"line_start":89,"line_end":89,"column_start":34,"column_end":48},"name":"RuleListParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3135,"byte_end":3149,"line_start":89,"line_end":89,"column_start":50,"column_end":64},"name":"parse_one_rule","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3185,"byte_end":3195,"line_start":90,"line_end":90,"column_start":34,"column_end":44},"name":"AtRuleType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3197,"byte_end":3216,"line_start":90,"line_end":90,"column_start":46,"column_end":65},"name":"QualifiedRuleParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3218,"byte_end":3230,"line_start":90,"line_end":90,"column_start":67,"column_end":79},"name":"AtRuleParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":474},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3254,"byte_end":3273,"line_start":91,"line_end":91,"column_start":22,"column_end":41},"name":"stylesheet_encoding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3275,"byte_end":3290,"line_start":91,"line_end":91,"column_start":43,"column_end":58},"name":"EncodingSupport","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1238},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3309,"byte_end":3313,"line_start":92,"line_end":92,"column_start":17,"column_end":21},"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1256},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3315,"byte_end":3320,"line_start":92,"line_end":92,"column_start":23,"column_end":28},"name":"Color","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":560},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3322,"byte_end":3341,"line_start":92,"line_end":92,"column_start":30,"column_end":49},"name":"parse_color_keyword","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":524},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3343,"byte_end":3356,"line_start":92,"line_end":92,"column_start":51,"column_end":64},"name":"AngleOrNumber","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":518},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3358,"byte_end":3376,"line_start":92,"line_end":92,"column_start":66,"column_end":84},"name":"NumberOrPercentage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":530},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3378,"byte_end":3398,"line_start":92,"line_end":92,"column_start":86,"column_end":106},"name":"ColorComponentParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":592},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3414,"byte_end":3423,"line_start":93,"line_end":93,"column_start":14,"column_end":23},"name":"parse_nth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3446,"byte_end":3451,"line_start":94,"line_end":94,"column_start":22,"column_end":27},"name":"ToCss","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":652},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3453,"byte_end":3468,"line_start":94,"line_end":94,"column_start":29,"column_end":44},"name":"CssStringWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":644},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3470,"byte_end":3490,"line_start":94,"line_end":94,"column_start":46,"column_end":66},"name":"serialize_identifier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3492,"byte_end":3508,"line_start":94,"line_end":94,"column_start":68,"column_end":84},"name":"serialize_string","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1424},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3510,"byte_end":3532,"line_start":94,"line_end":94,"column_start":86,"column_end":108},"name":"TokenSerializationType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3552,"byte_end":3558,"line_start":95,"line_end":95,"column_start":18,"column_end":24},"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":308},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3560,"byte_end":3569,"line_start":95,"line_end":95,"column_start":26,"column_end":35},"name":"Delimiter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1216},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3571,"byte_end":3581,"line_start":95,"line_end":95,"column_start":37,"column_end":47},"name":"Delimiters","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1122},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3583,"byte_end":3594,"line_start":95,"line_end":95,"column_start":49,"column_end":60},"name":"ParserState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3596,"byte_end":3607,"line_start":95,"line_end":95,"column_start":62,"column_end":73},"name":"ParserInput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1180},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3627,"byte_end":3637,"line_start":96,"line_end":96,"column_start":18,"column_end":28},"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1164},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3639,"byte_end":3653,"line_start":96,"line_end":96,"column_start":30,"column_end":44},"name":"ParseErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1148},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3655,"byte_end":3670,"line_start":96,"line_end":96,"column_start":46,"column_end":61},"name":"BasicParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1132},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3672,"byte_end":3691,"line_start":96,"line_end":96,"column_start":63,"column_end":82},"name":"BasicParseErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1466},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3717,"byte_end":3729,"line_start":97,"line_end":97,"column_start":24,"column_end":36},"name":"UnicodeRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3751,"byte_end":3759,"line_start":98,"line_end":98,"column_start":21,"column_end":29},"name":"CowRcStr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3807,"byte_end":3830,"line_start":101,"line_end":101,"column_start":32,"column_end":55},"name":"_internal__to_lowercase","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":206,"byte_end":4347,"line_start":5,"line_end":127,"column_start":1,"column_end":32},"name":"","qualname":"::","value":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":42},{"krate":0,"index":48},{"krate":0,"index":56},{"krate":0,"index":62},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":90},{"krate":0,"index":102},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":132},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":462},{"krate":0,"index":476},{"krate":0,"index":578},{"krate":0,"index":602},{"krate":0,"index":682},{"krate":0,"index":720}],"decl_id":null,"docs":"Implementation of [CSS Syntax Module Level 3](https://drafts.csswg.org/css-syntax/) for Rust.","sig":null,"attributes":[{"value":"crate_name = \"cssparser\"","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":206,"byte_end":234,"line_start":5,"line_end":5,"column_start":1,"column_end":29}},{"value":"crate_type = \"rlib\"","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":235,"byte_end":258,"line_start":6,"line_end":6,"column_start":1,"column_end":24}},{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":307,"byte_end":329,"line_start":9,"line_end":9,"column_start":1,"column_end":23}},{"value":"recursion_limit = \"200\"","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2302,"byte_end":2327,"line_start":69,"line_end":69,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":9524,"byte_end":9547,"line_start":133,"line_end":133,"column_start":8,"column_end":31},"name":"_internal__to_lowercase","qualname":"::macros::_internal__to_lowercase","value":"fn <'a> (buffer: &'a mut [u8], input: &'a str) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Implementation detail of match_ignore_ascii_case! and ascii_case_insensitive_phf_map! macros.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":9492,"byte_end":9516,"line_start":132,"line_end":132,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":162},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":11320,"byte_end":11335,"line_start":16,"line_end":16,"column_start":8,"column_end":23},"name":"parse_important","qualname":"::rules_and_declarations::parse_important","value":"fn <'i, 't> (input: &mut Parser<'i, 't>) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse `!important`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":11894,"byte_end":11906,"line_start":29,"line_end":29,"column_start":5,"column_end":17},"name":"WithoutBlock","qualname":"::rules_and_declarations::AtRuleType::WithoutBlock","value":"AtRuleType::WithoutBlock(P)","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The at-rule is expected to end with a `;` semicolon. Example: `@import`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":31},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":12084,"byte_end":12093,"line_start":34,"line_end":34,"column_start":5,"column_end":14},"name":"WithBlock","qualname":"::rules_and_declarations::AtRuleType::WithBlock","value":"AtRuleType::WithBlock(PB)","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The at-rule is expected to have a a `{ /* ... */ }` block. Example: `@media`","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":11663,"byte_end":11673,"line_start":24,"line_end":24,"column_start":10,"column_end":20},"name":"AtRuleType","qualname":"::rules_and_declarations::AtRuleType","value":"AtRuleType::{WithoutBlock, WithBlock}","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":31}],"decl_id":null,"docs":" The return value for `AtRuleParser::parse_prelude`.\n Indicates whether the at-rule is expected to have a `{ /* ... */ }` block\n or end with a `;` semicolon.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":12324,"byte_end":12341,"line_start":41,"line_end":41,"column_start":11,"column_end":28},"name":"DeclarationParser","qualname":"::rules_and_declarations::DeclarationParser","value":"DeclarationParser<'i>","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"decl_id":null,"docs":" A trait to provide various parsing of declaration values.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":12411,"byte_end":12422,"line_start":43,"line_end":43,"column_start":10,"column_end":21},"name":"Declaration","qualname":"::rules_and_declarations::DeclarationParser::Declaration","value":"type Declaration;","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" The finished representation of a declaration.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":12520,"byte_end":12525,"line_start":46,"line_end":46,"column_start":10,"column_end":15},"name":"Error","qualname":"::rules_and_declarations::DeclarationParser::Error","value":"type Error: 'i;","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" The error type that is included in the ParseError value that can be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":13447,"byte_end":13458,"line_start":65,"line_end":65,"column_start":8,"column_end":19},"name":"parse_value","qualname":"::rules_and_declarations::DeclarationParser::parse_value","value":"fn <'t> (&mut self, name: CowRcStr<'i>, input: &mut Parser<'i, 't>) -> Result<Self::Declaration, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" Parse the value of a declaration with the given `name`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":14061,"byte_end":14073,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"AtRuleParser","qualname":"::rules_and_declarations::AtRuleParser","value":"AtRuleParser<'i>","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188}],"decl_id":null,"docs":" A trait to provide various parsing of at-rules.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":14169,"byte_end":14183,"line_start":80,"line_end":80,"column_start":10,"column_end":24},"name":"PreludeNoBlock","qualname":"::rules_and_declarations::AtRuleParser::PreludeNoBlock","value":"type PreludeNoBlock;","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The intermediate representation of prelude of an at-rule without block;\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":14272,"byte_end":14284,"line_start":83,"line_end":83,"column_start":10,"column_end":22},"name":"PreludeBlock","qualname":"::rules_and_declarations::AtRuleParser::PreludeBlock","value":"type PreludeBlock;","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The intermediate representation of prelude of an at-rule with block;\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":180},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":14347,"byte_end":14353,"line_start":86,"line_end":86,"column_start":10,"column_end":16},"name":"AtRule","qualname":"::rules_and_declarations::AtRuleParser::AtRule","value":"type AtRule;","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The finished representation of an at-rule.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":14451,"byte_end":14456,"line_start":89,"line_end":89,"column_start":10,"column_end":15},"name":"Error","qualname":"::rules_and_declarations::AtRuleParser::Error","value":"type Error: 'i;","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The error type that is included in the ParseError value that can be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":15279,"byte_end":15292,"line_start":108,"line_end":108,"column_start":8,"column_end":21},"name":"parse_prelude","qualname":"::rules_and_declarations::AtRuleParser::parse_prelude","value":"fn <'t> (&mut self, name: CowRcStr<'i>, input: &mut Parser<'i, 't>) -> Result<AtRuleType<Self::PreludeNoBlock, Self::PreludeBlock>,\n       ParseError<'i, Self::Error>>","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Parse the prelude of an at-rule with the given `name`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":15934,"byte_end":15952,"line_start":122,"line_end":122,"column_start":8,"column_end":26},"name":"rule_without_block","qualname":"::rules_and_declarations::AtRuleParser::rule_without_block","value":"fn (&mut self, prelude: Self::PreludeNoBlock) -> Self::AtRule","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" End an at-rule which doesn't have block. Return the finished\n representation of the at-rule.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":16655,"byte_end":16666,"line_start":136,"line_end":136,"column_start":8,"column_end":19},"name":"parse_block","qualname":"::rules_and_declarations::AtRuleParser::parse_block","value":"fn <'t> (&mut self, prelude: Self::PreludeBlock, input: &mut Parser<'i, 't>) -> Result<Self::AtRule, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Parse the content of a `{ /* ... */ }` block for the body of the at-rule.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":17530,"byte_end":17549,"line_start":154,"line_end":154,"column_start":11,"column_end":30},"name":"QualifiedRuleParser","qualname":"::rules_and_declarations::QualifiedRuleParser","value":"QualifiedRuleParser<'i>","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200}],"decl_id":null,"docs":" A trait to provide various parsing of qualified rules.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":192},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":17634,"byte_end":17641,"line_start":156,"line_end":156,"column_start":10,"column_end":17},"name":"Prelude","qualname":"::rules_and_declarations::QualifiedRuleParser::Prelude","value":"type Prelude;","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" The intermediate representation of a qualified rule prelude.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":17710,"byte_end":17723,"line_start":159,"line_end":159,"column_start":10,"column_end":23},"name":"QualifiedRule","qualname":"::rules_and_declarations::QualifiedRuleParser::QualifiedRule","value":"type QualifiedRule;","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" The finished representation of a qualified rule.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":196},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":17821,"byte_end":17826,"line_start":162,"line_end":162,"column_start":10,"column_end":15},"name":"Error","qualname":"::rules_and_declarations::QualifiedRuleParser::Error","value":"type Error: 'i;","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" The error type that is included in the ParseError value that can be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":18252,"byte_end":18265,"line_start":173,"line_end":173,"column_start":8,"column_end":21},"name":"parse_prelude","qualname":"::rules_and_declarations::QualifiedRuleParser::parse_prelude","value":"fn <'t> (&mut self, input: &mut Parser<'i, 't>) -> Result<Self::Prelude, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" Parse the prelude of a qualified rule. For style rules, this is as Selector list.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":18770,"byte_end":18781,"line_start":184,"line_end":184,"column_start":8,"column_end":19},"name":"parse_block","qualname":"::rules_and_declarations::QualifiedRuleParser::parse_block","value":"fn <'t> (&mut self, prelude: Self::Prelude, input: &mut Parser<'i, 't>) -> Result<Self::QualifiedRule, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":202},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":19130,"byte_end":19151,"line_start":194,"line_end":194,"column_start":12,"column_end":33},"name":"DeclarationListParser","qualname":"::rules_and_declarations::DeclarationListParser","value":"DeclarationListParser { input, parser }","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":57}],"decl_id":null,"docs":" Provides an iterator for declaration list parsing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":55},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":19241,"byte_end":19246,"line_start":196,"line_end":196,"column_start":9,"column_end":14},"name":"input","qualname":"::rules_and_declarations::DeclarationListParser::input","value":"&'a mut parser::Parser<'i, 't>","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The input given to `DeclarationListParser::new`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":57},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":19338,"byte_end":19344,"line_start":199,"line_end":199,"column_start":9,"column_end":15},"name":"parser","qualname":"::rules_and_declarations::DeclarationListParser::parser","value":"P","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The parser given to `DeclarationListParser::new`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":20321,"byte_end":20324,"line_start":220,"line_end":220,"column_start":12,"column_end":15},"name":"new","qualname":"<DeclarationListParser<'i, 't, 'a, P>>::new","value":"fn (input: &'a mut Parser<'i, 't>, parser: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeclarationListParser` for the given `input` and `parser`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":22767,"byte_end":22781,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"RuleListParser","qualname":"::rules_and_declarations::RuleListParser","value":"RuleListParser { input, parser }","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105}],"decl_id":null,"docs":" Provides an iterator for rule list parsing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":99},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":22864,"byte_end":22869,"line_start":278,"line_end":278,"column_start":9,"column_end":14},"name":"input","qualname":"::rules_and_declarations::RuleListParser::input","value":"&'a mut parser::Parser<'i, 't>","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" The input given to `RuleListParser::new`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":101},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":22954,"byte_end":22960,"line_start":281,"line_end":281,"column_start":9,"column_end":15},"name":"parser","qualname":"::rules_and_declarations::RuleListParser::parser","value":"P","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" The parser given to `RuleListParser::new`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":23786,"byte_end":23804,"line_start":301,"line_end":301,"column_start":12,"column_end":30},"name":"new_for_stylesheet","qualname":"<RuleListParser<'i, 't, 'a, P>>::new_for_stylesheet","value":"fn (input: &'a mut Parser<'i, 't>, parser: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `RuleListParser` for the given `input` at the top-level of a stylesheet\n and the given `parser`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":24374,"byte_end":24393,"line_start":316,"line_end":316,"column_start":12,"column_end":31},"name":"new_for_nested_rule","qualname":"<RuleListParser<'i, 't, 'a, P>>::new_for_nested_rule","value":"fn (input: &'a mut Parser<'i, 't>, parser: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same is `new_for_stylesheet`, but should be used for rule lists inside a block\n such as the body of an `@media` rule.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":26892,"byte_end":26913,"line_start":379,"line_end":379,"column_start":8,"column_end":29},"name":"parse_one_declaration","qualname":"::rules_and_declarations::parse_one_declaration","value":"fn <'i, 't, P, E> (input: &mut Parser<'i, 't>, parser: &mut P) -> Result<<P as DeclarationParser<'i>>::Declaration,\n       (ParseError<'i, E>, &'i str)>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single declaration, such as an `( /* ... */ )` parenthesis in an `@supports` prelude.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":27586,"byte_end":27600,"line_start":394,"line_end":394,"column_start":8,"column_end":22},"name":"parse_one_rule","qualname":"::rules_and_declarations::parse_one_rule","value":"fn <'i, 't, R, P, E> (input: &mut Parser<'i, 't>, parser: &mut P) -> Result<R, ParseError<'i, E>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single rule, such as for CSSOM’s `CSSStyleSheet.insertRule`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1117},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7842625,"byte_end":7842630,"line_start":2,"line_end":2,"column_start":94,"column_end":99},"name":"Ident","qualname":"::tokenizer::Token::Ident","value":"Token::Ident(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<ident-token>`](https://drafts.csswg.org/css-syntax/#ident-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1121},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7842829,"byte_end":7842838,"line_start":2,"line_end":2,"column_start":298,"column_end":307},"name":"AtKeyword","qualname":"::tokenizer::Token::AtKeyword","value":"Token::AtKeyword(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<at-keyword-token>`](https://drafts.csswg.org/css-syntax/#at-keyword-token-diagram)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1125},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7843068,"byte_end":7843072,"line_start":2,"line_end":2,"column_start":537,"column_end":541},"name":"Hash","qualname":"::tokenizer::Token::Hash","value":"Token::Hash(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"unrestricted\"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1129},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7843292,"byte_end":7843298,"line_start":2,"line_end":2,"column_start":761,"column_end":767},"name":"IDHash","qualname":"::tokenizer::Token::IDHash","value":"Token::IDHash(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"id\"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1133},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7843485,"byte_end":7843497,"line_start":2,"line_end":2,"column_start":954,"column_end":966},"name":"QuotedString","qualname":"::tokenizer::Token::QuotedString","value":"Token::QuotedString(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<string-token>`](https://drafts.csswg.org/css-syntax/#string-token-diagram)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1137},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7843778,"byte_end":7843789,"line_start":2,"line_end":2,"column_start":1247,"column_end":1258},"name":"UnquotedUrl","qualname":"::tokenizer::Token::UnquotedUrl","value":"Token::UnquotedUrl(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<url-token>`](https://drafts.csswg.org/css-syntax/#url-token-diagram)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1141},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7843845,"byte_end":7843850,"line_start":2,"line_end":2,"column_start":1314,"column_end":1319},"name":"Delim","qualname":"::tokenizer::Token::Delim","value":"Token::Delim(char)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<delim-token>`\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1145},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7843957,"byte_end":7843963,"line_start":2,"line_end":2,"column_start":1426,"column_end":1432},"name":"Number","qualname":"::tokenizer::Token::Number","value":"Token::Number { has_sign, value, int_value }","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<number-token>`](https://drafts.csswg.org/css-syntax/#number-token-diagram)\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1153},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7844442,"byte_end":7844452,"line_start":4,"line_end":4,"column_start":108,"column_end":118},"name":"Percentage","qualname":"::tokenizer::Token::Percentage","value":"Token::Percentage { has_sign, unit_value, int_value }","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<percentage-token>`](https://drafts.csswg.org/css-syntax/#percentage-token-diagram)\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1161},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7844917,"byte_end":7844926,"line_start":6,"line_end":6,"column_start":106,"column_end":115},"name":"Dimension","qualname":"::tokenizer::Token::Dimension","value":"Token::Dimension { has_sign, value, int_value, unit }","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<dimension-token>`](https://drafts.csswg.org/css-syntax/#dimension-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1171},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7845475,"byte_end":7845485,"line_start":8,"line_end":8,"column_start":108,"column_end":118},"name":"WhiteSpace","qualname":"::tokenizer::Token::WhiteSpace","value":"Token::WhiteSpace(&'a str)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<whitespace-token>`](https://drafts.csswg.org/css-syntax/#whitespace-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1175},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7845769,"byte_end":7845776,"line_start":8,"line_end":8,"column_start":402,"column_end":409},"name":"Comment","qualname":"::tokenizer::Token::Comment","value":"Token::Comment(&'a str)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A comment.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1179},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7845829,"byte_end":7845834,"line_start":8,"line_end":8,"column_start":462,"column_end":467},"name":"Colon","qualname":"::tokenizer::Token::Colon","value":"Token::Colon","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `:` `<colon-token>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1181},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7845878,"byte_end":7845887,"line_start":8,"line_end":8,"column_start":511,"column_end":520},"name":"Semicolon","qualname":"::tokenizer::Token::Semicolon","value":"Token::Semicolon","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `;` `<semicolon-token>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1183},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7845927,"byte_end":7845932,"line_start":8,"line_end":8,"column_start":560,"column_end":565},"name":"Comma","qualname":"::tokenizer::Token::Comma","value":"Token::Comma","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `,` `<comma-token>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1185},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846049,"byte_end":7846061,"line_start":8,"line_end":8,"column_start":682,"column_end":694},"name":"IncludeMatch","qualname":"::tokenizer::Token::IncludeMatch","value":"Token::IncludeMatch","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `~=` [`<include-match-token>`](https://drafts.csswg.org/css-syntax/#include-match-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1187},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846172,"byte_end":7846181,"line_start":8,"line_end":8,"column_start":805,"column_end":814},"name":"DashMatch","qualname":"::tokenizer::Token::DashMatch","value":"Token::DashMatch","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `|=` [`<dash-match-token>`](https://drafts.csswg.org/css-syntax/#dash-match-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1189},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846296,"byte_end":7846307,"line_start":8,"line_end":8,"column_start":929,"column_end":940},"name":"PrefixMatch","qualname":"::tokenizer::Token::PrefixMatch","value":"Token::PrefixMatch","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `^=` [`<prefix-match-token>`](https://drafts.csswg.org/css-syntax/#prefix-match-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1191},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846422,"byte_end":7846433,"line_start":8,"line_end":8,"column_start":1055,"column_end":1066},"name":"SuffixMatch","qualname":"::tokenizer::Token::SuffixMatch","value":"Token::SuffixMatch","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `$=` [`<suffix-match-token>`](https://drafts.csswg.org/css-syntax/#suffix-match-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1193},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846554,"byte_end":7846568,"line_start":8,"line_end":8,"column_start":1187,"column_end":1201},"name":"SubstringMatch","qualname":"::tokenizer::Token::SubstringMatch","value":"Token::SubstringMatch","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `*=` [`<substring-match-token>`](https://drafts.csswg.org/css-syntax/#substring-match-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1195},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846667,"byte_end":7846670,"line_start":8,"line_end":8,"column_start":1300,"column_end":1303},"name":"CDO","qualname":"::tokenizer::Token::CDO","value":"Token::CDO","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<!--` [`<CDO-token>`](https://drafts.csswg.org/css-syntax/#CDO-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1197},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846768,"byte_end":7846771,"line_start":8,"line_end":8,"column_start":1401,"column_end":1404},"name":"CDC","qualname":"::tokenizer::Token::CDC","value":"Token::CDC","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `-->` [`<CDC-token>`](https://drafts.csswg.org/css-syntax/#CDC-token-diagram)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1199},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7846953,"byte_end":7846961,"line_start":8,"line_end":8,"column_start":1586,"column_end":1594},"name":"Function","qualname":"::tokenizer::Token::Function","value":"Token::Function(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A [`<function-token>`](https://drafts.csswg.org/css-syntax/#function-token-diagram)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1203},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7847013,"byte_end":7847029,"line_start":8,"line_end":8,"column_start":1646,"column_end":1662},"name":"ParenthesisBlock","qualname":"::tokenizer::Token::ParenthesisBlock","value":"Token::ParenthesisBlock","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<(-token>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1205},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7847061,"byte_end":7847079,"line_start":8,"line_end":8,"column_start":1694,"column_end":1712},"name":"SquareBracketBlock","qualname":"::tokenizer::Token::SquareBracketBlock","value":"Token::SquareBracketBlock","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<[-token>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1207},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7847111,"byte_end":7847128,"line_start":8,"line_end":8,"column_start":1744,"column_end":1761},"name":"CurlyBracketBlock","qualname":"::tokenizer::Token::CurlyBracketBlock","value":"Token::CurlyBracketBlock","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<{-token>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1209},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7847239,"byte_end":7847245,"line_start":8,"line_end":8,"column_start":1872,"column_end":1878},"name":"BadUrl","qualname":"::tokenizer::Token::BadUrl","value":"Token::BadUrl(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<bad-url-token>`","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1213},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7847379,"byte_end":7847388,"line_start":8,"line_end":8,"column_start":2012,"column_end":2021},"name":"BadString","qualname":"::tokenizer::Token::BadString","value":"Token::BadString(CowRcStr<'a>)","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<bad-string-token>`","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1217},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7847600,"byte_end":7847616,"line_start":8,"line_end":8,"column_start":2233,"column_end":2249},"name":"CloseParenthesis","qualname":"::tokenizer::Token::CloseParenthesis","value":"Token::CloseParenthesis","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<)-token>`","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1219},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7847808,"byte_end":7847826,"line_start":8,"line_end":8,"column_start":2441,"column_end":2459},"name":"CloseSquareBracket","qualname":"::tokenizer::Token::CloseSquareBracket","value":"Token::CloseSquareBracket","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<]-token>`","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1221},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7848018,"byte_end":7848035,"line_start":8,"line_end":8,"column_start":2651,"column_end":2668},"name":"CloseCurlyBracket","qualname":"::tokenizer::Token::CloseCurlyBracket","value":"Token::CloseCurlyBracket","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" A `<}-token>`","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1024},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7842517,"byte_end":7842522,"line_start":1,"line_end":1,"column_start":486,"column_end":491},"name":"Token","qualname":"::tokenizer::Token","value":"Token::{Ident, AtKeyword, Hash, IDHash, QuotedString, UnquotedUrl, Delim, Number, Percentage, Dimension, WhiteSpace, Comment, Colon, Semicolon, Comma, IncludeMatch, DashMatch, PrefixMatch, SuffixMatch, SubstringMatch, CDO, CDC, Function, ParenthesisBlock, SquareBracketBlock, CurlyBracketBlock, BadUrl, BadString, CloseParenthesis, CloseSquareBracket, CloseCurlyBracket}","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1121},{"krate":0,"index":1125},{"krate":0,"index":1129},{"krate":0,"index":1133},{"krate":0,"index":1137},{"krate":0,"index":1141},{"krate":0,"index":1145},{"krate":0,"index":1153},{"krate":0,"index":1161},{"krate":0,"index":1171},{"krate":0,"index":1175},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1183},{"krate":0,"index":1185},{"krate":0,"index":1187},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1193},{"krate":0,"index":1195},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1213},{"krate":0,"index":1217},{"krate":0,"index":1219},{"krate":0,"index":1221}],"decl_id":null,"docs":" One of the pieces the CSS input is broken into.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7848437,"byte_end":7848451,"line_start":10,"line_end":10,"column_start":371,"column_end":385},"name":"is_parse_error","qualname":"<Token<'a>>::is_parse_error","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether this token represents a parse error.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1062},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864412,"byte_end":7864426,"line_start":177,"line_end":177,"column_start":167,"column_end":181},"name":"SourcePosition","qualname":"::tokenizer::SourcePosition","value":"","parent":null,"children":[],"decl_id":null,"docs":" A position from the start of the input, counted in UTF-8 bytes.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864401,"byte_end":7864452,"line_start":177,"line_end":177,"column_start":156,"column_end":207}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864401,"byte_end":7864452,"line_start":177,"line_end":177,"column_start":156,"column_end":207}}]},{"kind":"Struct","id":{"krate":0,"index":1100},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864600,"byte_end":7864614,"line_start":177,"line_end":177,"column_start":355,"column_end":369},"name":"SourceLocation","qualname":"::tokenizer::SourceLocation","value":"SourceLocation { line, column }","parent":null,"children":[{"krate":0,"index":1259},{"krate":0,"index":1261}],"decl_id":null,"docs":" The line and column number for a given position within the input.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864589,"byte_end":7864925,"line_start":177,"line_end":179,"column_start":344,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864589,"byte_end":7864925,"line_start":177,"line_end":179,"column_start":344,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":1259},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864729,"byte_end":7864733,"line_start":178,"line_end":178,"column_start":113,"column_end":117},"name":"line","qualname":"::tokenizer::SourceLocation::line","value":"u32","parent":{"krate":0,"index":1100},"children":[],"decl_id":null,"docs":" The line number, starting at 0 for the first line, unless `with_first_line_number` was used.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1261},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7864909,"byte_end":7864915,"line_start":178,"line_end":178,"column_start":293,"column_end":299},"name":"column","qualname":"::tokenizer::SourceLocation::column","value":"u32","parent":{"krate":0,"index":1100},"children":[],"decl_id":null,"docs":" The column number within a line, starting at 1 for first the character of the line.\n Column numbers are counted in UTF-16 code units.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1122},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":32491,"byte_end":32502,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"ParserState","qualname":"::parser::ParserState","value":"ParserState {  }","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1267},{"krate":0,"index":1269}],"decl_id":null,"docs":" A capture of the internal state of a `Parser` (including the position within the input),\n obtained from the `Parser::position` method.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":32797,"byte_end":32805,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"position","qualname":"<ParserState>::position","value":"fn (&self) -> SourcePosition","parent":null,"children":[],"decl_id":null,"docs":" The position from the start of the input, counted in UTF-8 bytes.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":32776,"byte_end":32785,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":32945,"byte_end":32960,"line_start":35,"line_end":35,"column_start":12,"column_end":27},"name":"source_location","qualname":"<ParserState>::source_location","value":"fn (&self) -> SourceLocation","parent":null,"children":[],"decl_id":null,"docs":" The line number and column number\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":32924,"byte_end":32933,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33316,"byte_end":33331,"line_start":47,"line_end":47,"column_start":5,"column_end":20},"name":"UnexpectedToken","qualname":"::parser::BasicParseErrorKind::UnexpectedToken","value":"BasicParseErrorKind::UnexpectedToken(Token<'i>)","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" An unexpected token was encountered.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33407,"byte_end":33417,"line_start":49,"line_end":49,"column_start":5,"column_end":15},"name":"EndOfInput","qualname":"::parser::BasicParseErrorKind::EndOfInput","value":"BasicParseErrorKind::EndOfInput","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" The end of the input was encountered unexpectedly.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33477,"byte_end":33490,"line_start":51,"line_end":51,"column_start":5,"column_end":18},"name":"AtRuleInvalid","qualname":"::parser::BasicParseErrorKind::AtRuleInvalid","value":"BasicParseErrorKind::AtRuleInvalid(CowRcStr<'i>)","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" An `@` rule was encountered that was invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33555,"byte_end":33572,"line_start":53,"line_end":53,"column_start":5,"column_end":22},"name":"AtRuleBodyInvalid","qualname":"::parser::BasicParseErrorKind::AtRuleBodyInvalid","value":"BasicParseErrorKind::AtRuleBodyInvalid","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" The body of an '@' rule was invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33637,"byte_end":33657,"line_start":55,"line_end":55,"column_start":5,"column_end":25},"name":"QualifiedRuleInvalid","qualname":"::parser::BasicParseErrorKind::QualifiedRuleInvalid","value":"BasicParseErrorKind::QualifiedRuleInvalid","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" A qualified rule was encountered that was invalid.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1132},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33241,"byte_end":33260,"line_start":45,"line_end":45,"column_start":10,"column_end":29},"name":"BasicParseErrorKind","qualname":"::parser::BasicParseErrorKind","value":"BasicParseErrorKind::{UnexpectedToken, EndOfInput, AtRuleInvalid, AtRuleBodyInvalid, QualifiedRuleInvalid}","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1281},{"krate":0,"index":1283}],"decl_id":null,"docs":" Details about a `BasicParseError`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1148},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33794,"byte_end":33809,"line_start":60,"line_end":60,"column_start":12,"column_end":27},"name":"BasicParseError","qualname":"::parser::BasicParseError","value":"BasicParseError { kind, location }","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1295}],"decl_id":null,"docs":" The funamental parsing errors that can be triggered by built-in parsing routines.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1293},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33854,"byte_end":33858,"line_start":62,"line_end":62,"column_start":9,"column_end":13},"name":"kind","qualname":"::parser::BasicParseError::kind","value":"parser::BasicParseErrorKind<'i>","parent":{"krate":0,"index":1148},"children":[],"decl_id":null,"docs":" Details of this error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1295},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":33936,"byte_end":33944,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"location","qualname":"::parser::BasicParseError::location","value":"tokenizer::SourceLocation","parent":{"krate":0,"index":1148},"children":[],"decl_id":null,"docs":" Location where this error occurred\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34357,"byte_end":34389,"line_start":80,"line_end":80,"column_start":12,"column_end":44},"name":"new_basic_unexpected_token_error","qualname":"<SourceLocation>::new_basic_unexpected_token_error","value":"fn <'i> (self, token: Token<'i>) -> BasicParseError<'i>","parent":null,"children":[],"decl_id":null,"docs":" Create a new BasicParseError at this location for an unexpected token\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34336,"byte_end":34345,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34675,"byte_end":34701,"line_start":89,"line_end":89,"column_start":12,"column_end":38},"name":"new_unexpected_token_error","qualname":"<SourceLocation>::new_unexpected_token_error","value":"fn <'i, E> (self, token: Token<'i>) -> ParseError<'i, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ParseError at this location for an unexpected token\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34654,"byte_end":34663,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34989,"byte_end":35005,"line_start":98,"line_end":98,"column_start":12,"column_end":28},"name":"new_custom_error","qualname":"<SourceLocation>::new_custom_error","value":"fn <'i, E1, E2> (self, error: E1) -> ParseError<'i, E2>","parent":null,"children":[],"decl_id":null,"docs":" Create a new custom ParseError at this location\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34968,"byte_end":34977,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1305},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":35366,"byte_end":35371,"line_start":110,"line_end":110,"column_start":5,"column_end":10},"name":"Basic","qualname":"::parser::ParseErrorKind::Basic","value":"ParseErrorKind::Basic(BasicParseErrorKind<'i>)","parent":{"krate":0,"index":1164},"children":[],"decl_id":null,"docs":" A fundamental parse error from a built-in parsing routine.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":35462,"byte_end":35468,"line_start":112,"line_end":112,"column_start":5,"column_end":11},"name":"Custom","qualname":"::parser::ParseErrorKind::Custom","value":"ParseErrorKind::Custom(T)","parent":{"krate":0,"index":1164},"children":[],"decl_id":null,"docs":" A parse error reported by downstream consumer code.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1164},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":35267,"byte_end":35281,"line_start":108,"line_end":108,"column_start":10,"column_end":24},"name":"ParseErrorKind","qualname":"::parser::ParseErrorKind","value":"ParseErrorKind::{Basic, Custom}","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1309}],"decl_id":null,"docs":" Details of a `ParseError`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":35563,"byte_end":35567,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"into","qualname":"<ParseErrorKind<'i, T>>::into","value":"fn <U> (self) -> ParseErrorKind<'i, U>","parent":null,"children":[],"decl_id":null,"docs":" Like `std::convert::Into::into`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1180},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":35953,"byte_end":35963,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::parser::ParseError","value":"ParseError { kind, location }","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1331}],"decl_id":null,"docs":" Extensible parse errors that can be encountered by client parsing implementations.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1329},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":36015,"byte_end":36019,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"kind","qualname":"::parser::ParseError::kind","value":"parser::ParseErrorKind<'i, E>","parent":{"krate":0,"index":1180},"children":[],"decl_id":null,"docs":" Details of this error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1331},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":36095,"byte_end":36103,"line_start":131,"line_end":131,"column_start":9,"column_end":17},"name":"location","qualname":"::parser::ParseError::location","value":"tokenizer::SourceLocation","parent":{"krate":0,"index":1180},"children":[],"decl_id":null,"docs":" Location where this error occurred\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":36237,"byte_end":36242,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"basic","qualname":"<ParseError<'i, T>>::basic","value":"fn (self) -> BasicParseError<'i>","parent":null,"children":[],"decl_id":null,"docs":" Extract the fundamental parse error from an extensible error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":36589,"byte_end":36593,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"name":"into","qualname":"<ParseError<'i, T>>::into","value":"fn <U> (self) -> ParseError<'i, U>","parent":null,"children":[],"decl_id":null,"docs":" Like `std::convert::Into::into`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":36801,"byte_end":36812,"line_start":156,"line_end":156,"column_start":12,"column_end":23},"name":"ParserInput","qualname":"::parser::ParserInput","value":"ParserInput {  }","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":225}],"decl_id":null,"docs":" The owned input for a parser.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":37088,"byte_end":37091,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserInput<'i>>::new","value":"fn (input: &'i str) -> ParserInput<'i>","parent":null,"children":[],"decl_id":null,"docs":" Create a new input for a parser.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":37364,"byte_end":37391,"line_start":178,"line_end":178,"column_start":12,"column_end":39},"name":"new_with_line_number_offset","qualname":"<ParserInput<'i>>::new_with_line_number_offset","value":"fn (input: &'i str, first_line_number: u32) -> ParserInput<'i>","parent":null,"children":[],"decl_id":null,"docs":" Create a new input for a parser.  Line numbers in locations\n are offset by the given value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":300},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":37861,"byte_end":37867,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243}],"decl_id":null,"docs":" A CSS parser that borrows its `&str` input,\n yields `Token`s,\n and keeps track of nested blocks and functions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1216},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39275,"byte_end":39285,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"Delimiters","qualname":"::parser::Delimiters","value":"Delimiters {  }","parent":null,"children":[{"krate":0,"index":1355}],"decl_id":null,"docs":" A set of characters, to be used with the `Parser::parse_until*` methods.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39264,"byte_end":39303,"line_start":241,"line_end":243,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39264,"byte_end":39303,"line_start":241,"line_end":243,"column_start":1,"column_end":2}}]},{"kind":"Mod","id":{"krate":0,"index":308},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39390,"byte_end":39399,"line_start":247,"line_end":247,"column_start":9,"column_end":18},"name":"Delimiter","qualname":"::parser::Delimiter","value":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/cssparser-0.23.7/src/parser.rs","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320}],"decl_id":null,"docs":" `Delimiters` constants.\n","sig":null,"attributes":[{"value":"allow(non_upper_case_globals, non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39333,"byte_end":39381,"line_start":246,"line_end":246,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":312},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39476,"byte_end":39480,"line_start":251,"line_end":251,"column_start":15,"column_end":19},"name":"None","qualname":"::parser::Delimiter::None","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The empty delimiter set\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":314},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39599,"byte_end":39616,"line_start":253,"line_end":253,"column_start":15,"column_end":32},"name":"CurlyBracketBlock","qualname":"::parser::Delimiter::CurlyBracketBlock","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `{` opening curly bracket\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":316},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39728,"byte_end":39737,"line_start":255,"line_end":255,"column_start":15,"column_end":24},"name":"Semicolon","qualname":"::parser::Delimiter::Semicolon","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `;` semicolon\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":318},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39857,"byte_end":39861,"line_start":257,"line_end":257,"column_start":15,"column_end":19},"name":"Bang","qualname":"::parser::Delimiter::Bang","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `!` exclamation point\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":320},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":39969,"byte_end":39974,"line_start":259,"line_end":259,"column_start":15,"column_end":20},"name":"Comma","qualname":"::parser::Delimiter::Comma","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `,` comma\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":41711,"byte_end":41714,"line_start":319,"line_end":319,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser<'i, 't>>::new","value":"fn (input: &'t mut ParserInput<'i>) -> Parser<'i, 't>","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":41690,"byte_end":41699,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":41965,"byte_end":41977,"line_start":328,"line_end":328,"column_start":12,"column_end":24},"name":"current_line","qualname":"<Parser<'i, 't>>::current_line","value":"fn (&self) -> &'i str","parent":null,"children":[],"decl_id":null,"docs":" Return the current line that is being parsed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":42225,"byte_end":42237,"line_start":336,"line_end":336,"column_start":12,"column_end":24},"name":"is_exhausted","qualname":"<Parser<'i, 't>>::is_exhausted","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether the input is exhausted. That is, if `.next()` would return a token.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":42204,"byte_end":42213,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":42572,"byte_end":42588,"line_start":345,"line_end":345,"column_start":12,"column_end":28},"name":"expect_exhausted","qualname":"<Parser<'i, 't>>::expect_exhausted","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Check whether the input is exhausted. That is, if `.next()` would return a token.\n Return a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":42551,"byte_end":42560,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":43198,"byte_end":43206,"line_start":360,"line_end":360,"column_start":12,"column_end":20},"name":"position","qualname":"<Parser<'i, 't>>::position","value":"fn (&self) -> SourcePosition","parent":null,"children":[],"decl_id":null,"docs":" Return the current position within the input.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":43177,"byte_end":43186,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":43357,"byte_end":43380,"line_start":366,"line_end":366,"column_start":12,"column_end":35},"name":"current_source_location","qualname":"<Parser<'i, 't>>::current_source_location","value":"fn (&self) -> SourceLocation","parent":null,"children":[],"decl_id":null,"docs":" The current line number and column number.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":43336,"byte_end":43345,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":43697,"byte_end":43719,"line_start":375,"line_end":375,"column_start":12,"column_end":34},"name":"current_source_map_url","qualname":"<Parser<'i, 't>>::current_source_map_url","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" The source map URL, if known.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":44025,"byte_end":44043,"line_start":384,"line_end":384,"column_start":12,"column_end":30},"name":"current_source_url","qualname":"<Parser<'i, 't>>::current_source_url","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" The source URL, if known.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":44212,"byte_end":44227,"line_start":390,"line_end":390,"column_start":12,"column_end":27},"name":"new_basic_error","qualname":"<Parser<'i, 't>>::new_basic_error","value":"fn (&self, kind: BasicParseErrorKind<'i>) -> BasicParseError<'i>","parent":null,"children":[],"decl_id":null,"docs":" Create a new BasicParseError at the current location\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":44191,"byte_end":44200,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":44499,"byte_end":44508,"line_start":399,"line_end":399,"column_start":12,"column_end":21},"name":"new_error","qualname":"<Parser<'i, 't>>::new_error","value":"fn <E> (&self, kind: BasicParseErrorKind<'i>) -> ParseError<'i, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new basic ParseError at the current location\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":44478,"byte_end":44487,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":44805,"byte_end":44821,"line_start":408,"line_end":408,"column_start":12,"column_end":28},"name":"new_custom_error","qualname":"<Parser<'i, 't>>::new_custom_error","value":"fn <E1, E2> (&self, error: E1) -> ParseError<'i, E2>","parent":null,"children":[],"decl_id":null,"docs":" Create a new custom BasicParseError at the current location\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":44784,"byte_end":44793,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45055,"byte_end":45087,"line_start":414,"line_end":414,"column_start":12,"column_end":44},"name":"new_basic_unexpected_token_error","qualname":"<Parser<'i, 't>>::new_basic_unexpected_token_error","value":"fn (&self, token: Token<'i>) -> BasicParseError<'i>","parent":null,"children":[],"decl_id":null,"docs":" Create a new unexpected token BasicParseError at the current location\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45034,"byte_end":45043,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45317,"byte_end":45343,"line_start":420,"line_end":420,"column_start":12,"column_end":38},"name":"new_unexpected_token_error","qualname":"<Parser<'i, 't>>::new_unexpected_token_error","value":"fn <E> (&self, token: Token<'i>) -> ParseError<'i, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new unexpected token ParseError at the current location\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45296,"byte_end":45305,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45672,"byte_end":45677,"line_start":428,"line_end":428,"column_start":12,"column_end":17},"name":"state","qualname":"<Parser<'i, 't>>::state","value":"fn (&self) -> ParserState","parent":null,"children":[],"decl_id":null,"docs":" Return the current internal state of the parser (including position within the input).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45651,"byte_end":45660,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45938,"byte_end":45953,"line_start":437,"line_end":437,"column_start":12,"column_end":27},"name":"skip_whitespace","qualname":"<Parser<'i, 't>>::skip_whitespace","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advance the input until the next token that’s not whitespace or a comment.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":45917,"byte_end":45926,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":46959,"byte_end":46964,"line_start":468,"line_end":468,"column_start":12,"column_end":17},"name":"reset","qualname":"<Parser<'i, 't>>::reset","value":"fn (&mut self, state: &ParserState) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Restore the internal state of the parser (including position within the input)\n to what was previously saved by the `Parser::position` method.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":46938,"byte_end":46947,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":47207,"byte_end":47229,"line_start":475,"line_end":475,"column_start":12,"column_end":34},"name":"look_for_var_functions","qualname":"<Parser<'i, 't>>::look_for_var_functions","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Start looking for `var()` functions. (See the `.seen_var_functions()` method.)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":47186,"byte_end":47195,"line_start":474,"line_end":474,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":47478,"byte_end":47496,"line_start":482,"line_end":482,"column_start":12,"column_end":30},"name":"seen_var_functions","qualname":"<Parser<'i, 't>>::seen_var_functions","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a `var()` function has been seen by the tokenizer since\n either `look_for_var_functions` was called, and stop looking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":47457,"byte_end":47466,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":47843,"byte_end":47846,"line_start":491,"line_end":491,"column_start":12,"column_end":15},"name":"try","qualname":"<Parser<'i, 't>>::try","value":"fn <F, T, E> (&mut self, thing: F) -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure, passing it the parser.\n If the result (returned unchanged) is `Err`,\n the internal state of the parser  (including position within the input)\n is restored to what it was before the call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":47822,"byte_end":47831,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":48177,"byte_end":48182,"line_start":503,"line_end":503,"column_start":12,"column_end":17},"name":"slice","qualname":"<Parser<'i, 't>>::slice","value":"fn (&self, range: Range<SourcePosition>) -> &'i str","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of the CSS input\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":48156,"byte_end":48165,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":48392,"byte_end":48402,"line_start":509,"line_end":509,"column_start":12,"column_end":22},"name":"slice_from","qualname":"<Parser<'i, 't>>::slice_from","value":"fn (&self, start_position: SourcePosition) -> &'i str","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of the CSS input, from the given position to the current one.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":48371,"byte_end":48380,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":49124,"byte_end":49128,"line_start":524,"line_end":524,"column_start":12,"column_end":16},"name":"next","qualname":"<Parser<'i, 't>>::next","value":"fn (&mut self) -> Result<&Token<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Return the next token in the input that is neither whitespace or a comment,\n and advance the position accordingly.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":49358,"byte_end":49383,"line_start":530,"line_end":530,"column_start":12,"column_end":37},"name":"next_including_whitespace","qualname":"<Parser<'i, 't>>::next_including_whitespace","value":"fn (&mut self) -> Result<&Token<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Parser::next`, but does not skip whitespace tokens.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":50059,"byte_end":50097,"line_start":547,"line_end":547,"column_start":12,"column_end":50},"name":"next_including_whitespace_and_comments","qualname":"<Parser<'i, 't>>::next_including_whitespace_and_comments","value":"fn (&mut self) -> Result<&Token<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Parser::next`, but does not skip whitespace or comment tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":51949,"byte_end":51963,"line_start":592,"line_end":592,"column_start":12,"column_end":26},"name":"parse_entirely","qualname":"<Parser<'i, 't>>::parse_entirely","value":"fn <F, T, E> (&mut self, parse: F) -> Result<T, ParseError<'i, E>>","parent":null,"children":[],"decl_id":null,"docs":" Have the given closure parse something, then check the the input is exhausted.\n The result is overridden to `Err(())` if some input remains.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":51928,"byte_end":51937,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":52771,"byte_end":52792,"line_start":610,"line_end":610,"column_start":12,"column_end":33},"name":"parse_comma_separated","qualname":"<Parser<'i, 't>>::parse_comma_separated","value":"fn <F, T, E> (&mut self, mut parse_one: F) -> Result<Vec<T>, ParseError<'i, E>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a list of comma-separated values, all with the same syntax.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":52750,"byte_end":52759,"line_start":609,"line_end":609,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":54284,"byte_end":54302,"line_start":640,"line_end":640,"column_start":12,"column_end":30},"name":"parse_nested_block","qualname":"<Parser<'i, 't>>::parse_nested_block","value":"fn <F, T, E> (&mut self, parse: F) -> Result<T, ParseError<'i, E>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the content of a block or function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":54263,"byte_end":54272,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":54983,"byte_end":55001,"line_start":654,"line_end":654,"column_start":12,"column_end":30},"name":"parse_until_before","qualname":"<Parser<'i, 't>>::parse_until_before","value":"fn <F, T, E> (&mut self, delimiters: Delimiters, parse: F) -> Result<T, ParseError<'i, E>>","parent":null,"children":[],"decl_id":null,"docs":" Limit parsing to until a given delimiter or the end of the input. (E.g.\n a semicolon for a property value.)","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":54962,"byte_end":54971,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":55589,"byte_end":55606,"line_start":666,"line_end":666,"column_start":12,"column_end":29},"name":"parse_until_after","qualname":"<Parser<'i, 't>>::parse_until_after","value":"fn <F, T, E> (&mut self, delimiters: Delimiters, parse: F) -> Result<T, ParseError<'i, E>>","parent":null,"children":[],"decl_id":null,"docs":" Like `parse_until_before`, but also consume the delimiter token.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":55568,"byte_end":55577,"line_start":665,"line_end":665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":55954,"byte_end":55971,"line_start":674,"line_end":674,"column_start":12,"column_end":29},"name":"expect_whitespace","qualname":"<Parser<'i, 't>>::expect_whitespace","value":"fn (&mut self) -> Result<&'i str, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <whitespace-token> and return its value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":55933,"byte_end":55942,"line_start":673,"line_end":673,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":56377,"byte_end":56389,"line_start":684,"line_end":684,"column_start":12,"column_end":24},"name":"expect_ident","qualname":"<Parser<'i, 't>>::expect_ident","value":"fn (&mut self) -> Result<&CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <ident-token> and return the unescaped value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":56356,"byte_end":56365,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":56609,"byte_end":56628,"line_start":692,"line_end":692,"column_start":12,"column_end":31},"name":"expect_ident_cloned","qualname":"<Parser<'i, 't>>::expect_ident_cloned","value":"fn (&mut self) -> Result<CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" expect_ident, but clone the CowRcStr\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":56588,"byte_end":56597,"line_start":691,"line_end":691,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":56869,"byte_end":56890,"line_start":698,"line_end":698,"column_start":12,"column_end":33},"name":"expect_ident_matching","qualname":"<Parser<'i, 't>>::expect_ident_matching","value":"fn (&mut self, expected_value: &str) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":56848,"byte_end":56857,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57182,"byte_end":57195,"line_start":706,"line_end":706,"column_start":12,"column_end":25},"name":"expect_string","qualname":"<Parser<'i, 't>>::expect_string","value":"fn (&mut self) -> Result<&CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <string-token> and return the unescaped value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57161,"byte_end":57170,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57423,"byte_end":57443,"line_start":714,"line_end":714,"column_start":12,"column_end":32},"name":"expect_string_cloned","qualname":"<Parser<'i, 't>>::expect_string_cloned","value":"fn (&mut self) -> Result<CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" expect_string, but clone the CowRcStr\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57402,"byte_end":57411,"line_start":713,"line_end":713,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57672,"byte_end":57694,"line_start":720,"line_end":720,"column_start":12,"column_end":34},"name":"expect_ident_or_string","qualname":"<Parser<'i, 't>>::expect_ident_or_string","value":"fn (&mut self) -> Result<&CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse either a <ident-token> or a <string-token>, and return the unescaped value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57651,"byte_end":57660,"line_start":719,"line_end":719,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57986,"byte_end":57996,"line_start":729,"line_end":729,"column_start":12,"column_end":22},"name":"expect_url","qualname":"<Parser<'i, 't>>::expect_url","value":"fn (&mut self) -> Result<CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <url-token> and return the unescaped value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":57965,"byte_end":57974,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":58577,"byte_end":58597,"line_start":741,"line_end":741,"column_start":12,"column_end":32},"name":"expect_url_or_string","qualname":"<Parser<'i, 't>>::expect_url_or_string","value":"fn (&mut self) -> Result<CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse either a <url-token> or a <string-token>, and return the unescaped value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":58556,"byte_end":58565,"line_start":740,"line_end":740,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":59223,"byte_end":59236,"line_start":754,"line_end":754,"column_start":12,"column_end":25},"name":"expect_number","qualname":"<Parser<'i, 't>>::expect_number","value":"fn (&mut self) -> Result<f32, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <number-token> and return the integer value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":59202,"byte_end":59211,"line_start":753,"line_end":753,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":59504,"byte_end":59518,"line_start":762,"line_end":762,"column_start":12,"column_end":26},"name":"expect_integer","qualname":"<Parser<'i, 't>>::expect_integer","value":"fn (&mut self) -> Result<i32, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <number-token> that does not have a fractional part, and return the integer value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":59483,"byte_end":59492,"line_start":761,"line_end":761,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":59845,"byte_end":59862,"line_start":771,"line_end":771,"column_start":12,"column_end":29},"name":"expect_percentage","qualname":"<Parser<'i, 't>>::expect_percentage","value":"fn (&mut self) -> Result<f32, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <percentage-token> and return the value.\n `0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":59824,"byte_end":59833,"line_start":770,"line_end":770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60080,"byte_end":60092,"line_start":779,"line_end":779,"column_start":12,"column_end":24},"name":"expect_colon","qualname":"<Parser<'i, 't>>::expect_colon","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `:` <colon-token>.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60059,"byte_end":60068,"line_start":778,"line_end":778,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60281,"byte_end":60297,"line_start":787,"line_end":787,"column_start":12,"column_end":28},"name":"expect_semicolon","qualname":"<Parser<'i, 't>>::expect_semicolon","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `;` <semicolon-token>.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60260,"byte_end":60269,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60486,"byte_end":60498,"line_start":795,"line_end":795,"column_start":12,"column_end":24},"name":"expect_comma","qualname":"<Parser<'i, 't>>::expect_comma","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `,` <comma-token>.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60465,"byte_end":60474,"line_start":794,"line_end":794,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60700,"byte_end":60712,"line_start":803,"line_end":803,"column_start":12,"column_end":24},"name":"expect_delim","qualname":"<Parser<'i, 't>>::expect_delim","value":"fn (&mut self, expected_value: char) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <delim-token> with the given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":60679,"byte_end":60688,"line_start":802,"line_end":802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":61070,"byte_end":61096,"line_start":813,"line_end":813,"column_start":12,"column_end":38},"name":"expect_curly_bracket_block","qualname":"<Parser<'i, 't>>::expect_curly_bracket_block","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `{ /* ... */ }` curly brackets block.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":61049,"byte_end":61058,"line_start":812,"line_end":812,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":61411,"byte_end":61438,"line_start":823,"line_end":823,"column_start":12,"column_end":39},"name":"expect_square_bracket_block","qualname":"<Parser<'i, 't>>::expect_square_bracket_block","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `[ /* ... */ ]` square brackets block.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":61390,"byte_end":61399,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":61750,"byte_end":61774,"line_start":833,"line_end":833,"column_start":12,"column_end":36},"name":"expect_parenthesis_block","qualname":"<Parser<'i, 't>>::expect_parenthesis_block","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `( /* ... */ )` parenthesis block.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":61729,"byte_end":61738,"line_start":832,"line_end":832,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":62087,"byte_end":62102,"line_start":843,"line_end":843,"column_start":12,"column_end":27},"name":"expect_function","qualname":"<Parser<'i, 't>>::expect_function","value":"fn (&mut self) -> Result<&CowRcStr<'i>, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <function> token and return its name.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":62066,"byte_end":62075,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":62471,"byte_end":62495,"line_start":853,"line_end":853,"column_start":12,"column_end":36},"name":"expect_function_matching","qualname":"<Parser<'i, 't>>::expect_function_matching","value":"fn (&mut self, expected_name: &str) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <function> token whose name is an ASCII-insensitive match for the given value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":62450,"byte_end":62459,"line_start":852,"line_end":852,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":62916,"byte_end":62937,"line_start":863,"line_end":863,"column_start":12,"column_end":33},"name":"expect_no_error_token","qualname":"<Parser<'i, 't>>::expect_no_error_token","value":"fn (&mut self) -> Result<(), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the input until exhaustion and check that it contains no “error” token.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":62895,"byte_end":62904,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":464},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,102,114,111,109,95,98,121,116,101,115,46,114,115],"byte_start":68638,"byte_end":68653,"line_start":6,"line_end":6,"column_start":11,"column_end":26},"name":"EncodingSupport","qualname":"::from_bytes::EncodingSupport","value":"EncodingSupport","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472}],"decl_id":null,"docs":" Abstraction for avoiding a dependency from cssparser to an encoding library\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":466},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,102,114,111,109,95,98,121,116,101,115,46,114,115],"byte_start":68696,"byte_end":68704,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"Encoding","qualname":"::from_bytes::EncodingSupport::Encoding","value":"type Encoding;","parent":{"krate":0,"index":464},"children":[],"decl_id":null,"docs":" One character encoding\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,102,114,111,109,95,98,121,116,101,115,46,114,115],"byte_start":68777,"byte_end":68787,"line_start":11,"line_end":11,"column_start":8,"column_end":18},"name":"from_label","qualname":"::from_bytes::EncodingSupport::from_label","value":"fn (ascii_label: &[u8]) -> Option<Self::Encoding>","parent":{"krate":0,"index":464},"children":[],"decl_id":null,"docs":" https://encoding.spec.whatwg.org/#concept-encoding-get\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,102,114,111,109,95,98,121,116,101,115,46,114,115],"byte_start":68877,"byte_end":68881,"line_start":14,"line_end":14,"column_start":8,"column_end":12},"name":"utf8","qualname":"::from_bytes::EncodingSupport::utf8","value":"fn () -> Self::Encoding","parent":{"krate":0,"index":464},"children":[],"decl_id":null,"docs":" Return the UTF-8 encoding\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,102,114,111,109,95,98,121,116,101,115,46,114,115],"byte_start":68970,"byte_end":68987,"line_start":17,"line_end":17,"column_start":8,"column_end":25},"name":"is_utf16_be_or_le","qualname":"::from_bytes::EncodingSupport::is_utf16_be_or_le","value":"fn (encoding: &Self::Encoding) -> bool","parent":{"krate":0,"index":464},"children":[],"decl_id":null,"docs":" Whether the given encoding is UTF-16BE or UTF-16LE\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":474},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,102,114,111,109,95,98,121,116,101,115,46,114,115],"byte_start":69625,"byte_end":69644,"line_start":33,"line_end":33,"column_start":8,"column_end":27},"name":"stylesheet_encoding","qualname":"::from_bytes::stylesheet_encoding","value":"fn <E> (css: &[u8], protocol_encoding_label: Option<&[u8]>, environment_encoding: Option<E::Encoding>) -> E::Encoding","parent":null,"children":[],"decl_id":null,"docs":" Determine the character encoding of a CSS stylesheet.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1238},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71403,"byte_end":71407,"line_start":15,"line_end":15,"column_start":12,"column_end":16},"name":"RGBA","qualname":"::color::RGBA","value":"RGBA { red, green, blue, alpha }","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363}],"decl_id":null,"docs":" A color with red, green, blue, and alpha components, in a byte each.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71392,"byte_end":71597,"line_start":15,"line_end":24,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":1357},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71445,"byte_end":71448,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"name":"red","qualname":"::color::RGBA::red","value":"u8","parent":{"krate":0,"index":1238},"children":[],"decl_id":null,"docs":" The red component.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1359},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71491,"byte_end":71496,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"green","qualname":"::color::RGBA::green","value":"u8","parent":{"krate":0,"index":1238},"children":[],"decl_id":null,"docs":" The green component.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1361},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71538,"byte_end":71542,"line_start":21,"line_end":21,"column_start":9,"column_end":13},"name":"blue","qualname":"::color::RGBA::blue","value":"u8","parent":{"krate":0,"index":1238},"children":[],"decl_id":null,"docs":" The blue component.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1363},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71585,"byte_end":71590,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"name":"alpha","qualname":"::color::RGBA::alpha","value":"u8","parent":{"krate":0,"index":1238},"children":[],"decl_id":null,"docs":" The alpha component.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71834,"byte_end":71845,"line_start":31,"line_end":31,"column_start":12,"column_end":23},"name":"from_floats","qualname":"<RGBA>::from_floats","value":"fn (red: f32, green: f32, blue: f32, alpha: f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new RGBA value from float components. It expects the red,\n green, blue and alpha channels in that order, and all values will be\n clamped to the 0.0 ... 1.0 range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71813,"byte_end":71822,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72136,"byte_end":72147,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"transparent","qualname":"<RGBA>::transparent","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transparent color.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72115,"byte_end":72124,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72302,"byte_end":72305,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<RGBA>::new","value":"fn (red: u8, green: u8, blue: u8, alpha: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same thing, but with `u8` values instead of floats in the 0 to 1 range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72281,"byte_end":72290,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72533,"byte_end":72540,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"red_f32","qualname":"<RGBA>::red_f32","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the red channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72512,"byte_end":72521,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72701,"byte_end":72710,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"green_f32","qualname":"<RGBA>::green_f32","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the green channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72680,"byte_end":72689,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72872,"byte_end":72880,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"blue_f32","qualname":"<RGBA>::blue_f32","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the blue channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":72851,"byte_end":72860,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":73042,"byte_end":73051,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"alpha_f32","qualname":"<RGBA>::alpha_f32","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the alpha channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":73021,"byte_end":73030,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1365},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":74652,"byte_end":74664,"line_start":130,"line_end":130,"column_start":5,"column_end":17},"name":"CurrentColor","qualname":"::color::Color::CurrentColor","value":"Color::CurrentColor","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" The 'currentcolor' keyword\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":74732,"byte_end":74736,"line_start":132,"line_end":132,"column_start":5,"column_end":9},"name":"RGBA","qualname":"::color::Color::RGBA","value":"Color::RGBA(RGBA)","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" Everything else gets converted to RGBA during parsing\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1256},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":74605,"byte_end":74610,"line_start":128,"line_end":128,"column_start":10,"column_end":15},"name":"Color","qualname":"::color::Color","value":"Color::{CurrentColor, RGBA}","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1367}],"decl_id":null,"docs":" A <color> value.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":74596,"byte_end":74745,"line_start":128,"line_end":133,"column_start":1,"column_end":2}}]},{"kind":"StructVariant","id":{"krate":0,"index":369},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75158,"byte_end":75164,"line_start":150,"line_end":150,"column_start":5,"column_end":11},"name":"Number","qualname":"::color::NumberOrPercentage::Number","value":"NumberOrPercentage::Number { value }","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" `<number>`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":373},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75271,"byte_end":75281,"line_start":155,"line_end":155,"column_start":5,"column_end":15},"name":"Percentage","qualname":"::color::NumberOrPercentage::Percentage","value":"NumberOrPercentage::Percentage { unit_value }","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" `<percentage>`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":518},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75113,"byte_end":75131,"line_start":148,"line_end":148,"column_start":10,"column_end":28},"name":"NumberOrPercentage","qualname":"::color::NumberOrPercentage","value":"NumberOrPercentage::{Number, Percentage}","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":373}],"decl_id":null,"docs":" Either a number or a percentage.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":377},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75736,"byte_end":75742,"line_start":174,"line_end":174,"column_start":5,"column_end":11},"name":"Number","qualname":"::color::AngleOrNumber::Number","value":"AngleOrNumber::Number { value }","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" `<number>`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":381},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75844,"byte_end":75849,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Angle","qualname":"::color::AngleOrNumber::Angle","value":"AngleOrNumber::Angle { degrees }","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" `<angle>`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":524},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75696,"byte_end":75709,"line_start":172,"line_end":172,"column_start":10,"column_end":23},"name":"AngleOrNumber","qualname":"::color::AngleOrNumber","value":"AngleOrNumber::{Number, Angle}","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":381}],"decl_id":null,"docs":" Either an angle or a number.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":530},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":76364,"byte_end":76384,"line_start":198,"line_end":198,"column_start":11,"column_end":31},"name":"ColorComponentParser","qualname":"::color::ColorComponentParser","value":"ColorComponentParser<'i>","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540}],"decl_id":null,"docs":" A trait that can be used to hook into how `cssparser` parses color\n components, with the intention of implementing more complicated behavior.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":76477,"byte_end":76482,"line_start":200,"line_end":200,"column_start":10,"column_end":15},"name":"Error","qualname":"::color::ColorComponentParser::Error","value":"type Error: 'i;","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" A custom error type that can be returned from the parsing functions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":76585,"byte_end":76606,"line_start":205,"line_end":205,"column_start":8,"column_end":29},"name":"parse_angle_or_number","qualname":"::color::ColorComponentParser::parse_angle_or_number","value":"fn <'t> (&self, input: &mut Parser<'i, 't>) -> Result<AngleOrNumber, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Parse an `<angle>` or `<number>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":77579,"byte_end":77595,"line_start":230,"line_end":230,"column_start":8,"column_end":24},"name":"parse_percentage","qualname":"::color::ColorComponentParser::parse_percentage","value":"fn <'t> (&self, input: &mut Parser<'i, 't>) -> Result<f32, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Parse a `<percentage>` value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":77806,"byte_end":77818,"line_start":238,"line_end":238,"column_start":8,"column_end":20},"name":"parse_number","qualname":"::color::ColorComponentParser::parse_number","value":"fn <'t> (&self, input: &mut Parser<'i, 't>) -> Result<f32, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Parse a `<number>` value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":78051,"byte_end":78077,"line_start":246,"line_end":246,"column_start":8,"column_end":34},"name":"parse_number_or_percentage","qualname":"::color::ColorComponentParser::parse_number_or_percentage","value":"fn <'t> (&self, input: &mut Parser<'i, 't>) -> Result<NumberOrPercentage, ParseError<'i, Self::Error>>","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Parse a `<number>` value or a `<percentage>` value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":78853,"byte_end":78863,"line_start":268,"line_end":268,"column_start":12,"column_end":22},"name":"parse_with","qualname":"<Color>::parse_with","value":"fn <'i, 't, ComponentParser> (component_parser: &ComponentParser, input: &mut Parser<'i, 't>) -> Result<Color, ParseError<'i, ComponentParser::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <color> value, per CSS Color Module Level 3.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":79875,"byte_end":79880,"line_start":293,"line_end":293,"column_start":12,"column_end":17},"name":"parse","qualname":"<Color>::parse","value":"fn <'i, 't> (input: &mut Parser<'i, 't>) -> Result<Color, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <color> value, per CSS Color Module Level 3.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":80200,"byte_end":80210,"line_start":302,"line_end":302,"column_start":12,"column_end":22},"name":"parse_hash","qualname":"<Color>::parse_hash","value":"fn (value: &[u8]) -> Result<Self, ()>","parent":null,"children":[],"decl_id":null,"docs":" Parse a color hash, without the leading '#' character.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":80179,"byte_end":80188,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":81706,"byte_end":81725,"line_start":348,"line_end":348,"column_start":8,"column_end":27},"name":"parse_color_keyword","qualname":"::color::parse_color_keyword","value":"fn (ident: &str) -> Result<Color, ()>","parent":null,"children":[],"decl_id":null,"docs":" Return the named color with the given name.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":81689,"byte_end":81698,"line_start":347,"line_end":347,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":592},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,110,116,104,46,114,115],"byte_start":95158,"byte_end":95167,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"parse_nth","qualname":"::nth::parse_nth","value":"fn <'i, 't> (input: &mut Parser<'i, 't>) -> Result<(i32, i32), BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the *An+B* notation, as found in the `:nth-child()` selector.\n The input is typically the arguments of a function,\n in which case the caller needs to check if the arguments’ parser is exhausted.\n Return `Ok((A, B))`, or `Err(())` for a syntax error.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":626},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":99645,"byte_end":99650,"line_start":16,"line_end":16,"column_start":11,"column_end":16},"name":"ToCss","qualname":"::serializer::ToCss","value":"ToCss","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":630}],"decl_id":null,"docs":" Trait for things the can serialize themselves in CSS syntax.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":99719,"byte_end":99725,"line_start":18,"line_end":18,"column_start":8,"column_end":14},"name":"to_css","qualname":"::serializer::ToCss::to_css","value":"fn <W> (&self, dest: &mut W) -> fmt::Result","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Serialize `self` in CSS syntax, writing to `dest`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":99968,"byte_end":99981,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"to_css_string","qualname":"::serializer::ToCss::to_css_string","value":"fn (&self) -> String","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Serialize `self` in CSS syntax and return a string.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":99951,"byte_end":99960,"line_start":23,"line_end":23,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":105542,"byte_end":105562,"line_start":168,"line_end":168,"column_start":8,"column_end":28},"name":"serialize_identifier","qualname":"::serializer::serialize_identifier","value":"fn <W> (mut value: &str, dest: &mut W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write a CSS identifier, escaping characters as necessary.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":107589,"byte_end":107605,"line_start":236,"line_end":236,"column_start":8,"column_end":24},"name":"serialize_string","qualname":"::serializer::serialize_string","value":"fn <W> (value: &str, dest: &mut W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write a double-quoted CSS string token, escaping content as necessary.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":652},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":108274,"byte_end":108289,"line_start":260,"line_end":260,"column_start":12,"column_end":27},"name":"CssStringWriter","qualname":"::serializer::CssStringWriter","value":"CssStringWriter {  }","parent":null,"children":[{"krate":0,"index":471}],"decl_id":null,"docs":" A `fmt::Write` adapter that escapes text for writing as a double-quoted CSS string.\n Quotes are not included.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":108454,"byte_end":108457,"line_start":266,"line_end":266,"column_start":12,"column_end":15},"name":"new","qualname":"<CssStringWriter<'a, W>>::new","value":"fn (inner: &'a mut W) -> CssStringWriter<'a, W>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a text writer to create a `CssStringWriter`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1424},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":111254,"byte_end":111276,"line_start":354,"line_end":354,"column_start":12,"column_end":34},"name":"TokenSerializationType","qualname":"::serializer::TokenSerializationType","value":"","parent":null,"children":[],"decl_id":null,"docs":" A category of token. See the `needs_separator_when_before` method.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":111243,"byte_end":111309,"line_start":354,"line_end":354,"column_start":1,"column_end":67}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":111243,"byte_end":111309,"line_start":354,"line_end":354,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":111526,"byte_end":111533,"line_start":361,"line_end":361,"column_start":12,"column_end":19},"name":"nothing","qualname":"<TokenSerializationType>::nothing","value":"fn () -> TokenSerializationType","parent":null,"children":[],"decl_id":null,"docs":" Return a value that represents the absence of a token, e.g. before the start of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":111751,"byte_end":111765,"line_start":366,"line_end":366,"column_start":12,"column_end":26},"name":"set_if_nothing","qualname":"<TokenSerializationType>::set_if_nothing","value":"fn (&mut self, new_value: TokenSerializationType) -> ()","parent":null,"children":[],"decl_id":null,"docs":" If this value is `TokenSerializationType::nothing()`, set it to the given value instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":112282,"byte_end":112309,"line_start":378,"line_end":378,"column_start":12,"column_end":39},"name":"needs_separator_when_before","qualname":"<TokenSerializationType>::needs_separator_when_before","value":"fn (self, other: TokenSerializationType) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if, when a token of category `self` is serialized just before\n a token of category `other` with no whitespace in between,\n an empty comment `/**/` needs to be inserted between them\n so that they are not re-parsed as a single token.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":114506,"byte_end":114524,"line_start":434,"line_end":434,"column_start":12,"column_end":30},"name":"serialization_type","qualname":"<Token<'a>>::serialization_type","value":"fn (&self) -> TokenSerializationType","parent":null,"children":[],"decl_id":null,"docs":" Categorize a token into a type that determines when `/**/` needs to be inserted\n between two tokens when serialized next to each other without whitespace in between.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":116772,"byte_end":116784,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"name":"UnicodeRange","qualname":"::unicode_range::UnicodeRange","value":"UnicodeRange { start, end }","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1591}],"decl_id":null,"docs":" One contiguous range of code points.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":116761,"byte_end":116932,"line_start":16,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":1589},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":116846,"byte_end":116851,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"start","qualname":"::unicode_range::UnicodeRange::start","value":"u32","parent":{"krate":0,"index":1466},"children":[],"decl_id":null,"docs":" Inclusive start of the range. In [0, end].\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1591},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":116921,"byte_end":116924,"line_start":21,"line_end":21,"column_start":9,"column_end":12},"name":"end","qualname":"::unicode_range::UnicodeRange::end","value":"u32","parent":{"krate":0,"index":1466},"children":[],"decl_id":null,"docs":" Inclusive end of the range. In [0, 0x10FFFF].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":117024,"byte_end":117029,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"parse","qualname":"<UnicodeRange>::parse","value":"fn <'i, 't> (input: &mut Parser<'i, 't>) -> Result<Self, BasicParseError<'i>>","parent":null,"children":[],"decl_id":null,"docs":" https://drafts.csswg.org/css-syntax/#urange-syntax\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":748},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":122602,"byte_end":122610,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"CowRcStr","qualname":"::cow_rc_str::CowRcStr","value":"CowRcStr {  }","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501}],"decl_id":null,"docs":" A string that is either shared (heap-allocated and reference-counted) or borrowed.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":19391,"byte_end":19412,"line_start":203,"line_end":203,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":20668,"byte_end":20689,"line_start":230,"line_end":230,"column_start":52,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":23060,"byte_end":23074,"line_start":288,"line_end":288,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":24767,"byte_end":24781,"line_start":329,"line_end":329,"column_start":52,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7848052,"byte_end":7848057,"line_start":9,"line_end":9,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7849228,"byte_end":7849237,"line_start":17,"line_end":17,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":32684,"byte_end":32695,"line_start":26,"line_end":26,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34007,"byte_end":34017,"line_start":67,"line_end":67,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34237,"byte_end":34251,"line_start":77,"line_end":77,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":35488,"byte_end":35502,"line_start":115,"line_end":115,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":36136,"byte_end":36146,"line_start":134,"line_end":134,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":37018,"byte_end":37029,"line_start":167,"line_end":167,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":38245,"byte_end":38254,"line_start":211,"line_end":211,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":40376,"byte_end":40386,"line_start":271,"line_end":271,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":40554,"byte_end":40564,"line_start":280,"line_end":280,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":41641,"byte_end":41647,"line_start":316,"line_end":316,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71604,"byte_end":71608,"line_start":26,"line_end":26,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":73704,"byte_end":73708,"line_start":99,"line_end":99,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":74820,"byte_end":74825,"line_start":138,"line_end":138,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75426,"byte_end":75444,"line_start":162,"line_end":162,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75935,"byte_end":75948,"line_start":185,"line_end":185,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":78640,"byte_end":78662,"line_start":260,"line_end":260,"column_start":39,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":78694,"byte_end":78699,"line_start":264,"line_end":264,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":100841,"byte_end":100846,"line_start":56,"line_end":56,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":108340,"byte_end":108355,"line_start":264,"line_end":264,"column_start":13,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":108581,"byte_end":108596,"line_start":271,"line_end":271,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":111391,"byte_end":111413,"line_start":359,"line_end":359,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":114216,"byte_end":114221,"line_start":429,"line_end":429,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":116939,"byte_end":116951,"line_start":24,"line_end":24,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":121468,"byte_end":121480,"line_start":160,"line_end":160,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":121605,"byte_end":121617,"line_start":166,"line_end":166,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":123503,"byte_end":123511,"line_start":45,"line_end":45,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":123734,"byte_end":123742,"line_start":55,"line_end":55,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":124052,"byte_end":124060,"line_start":68,"line_end":68,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":124170,"byte_end":124178,"line_start":75,"line_end":75,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":124897,"byte_end":124905,"line_start":101,"line_end":101,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125405,"byte_end":125413,"line_start":120,"line_end":120,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125619,"byte_end":125627,"line_start":131,"line_end":131,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125856,"byte_end":125864,"line_start":144,"line_end":144,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125963,"byte_end":125971,"line_start":151,"line_end":151,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126066,"byte_end":126074,"line_start":158,"line_end":158,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126178,"byte_end":126186,"line_start":165,"line_end":165,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126343,"byte_end":126351,"line_start":172,"line_end":172,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126499,"byte_end":126507,"line_start":179,"line_end":179,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126664,"byte_end":126672,"line_start":186,"line_end":186,"column_start":17,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126698,"byte_end":126706,"line_start":188,"line_end":188,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126843,"byte_end":126851,"line_start":195,"line_end":195,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":127006,"byte_end":127014,"line_start":202,"line_end":202,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":19391,"byte_end":19412,"line_start":203,"line_end":203,"column_start":39,"column_end":60},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":20668,"byte_end":20689,"line_start":230,"line_end":230,"column_start":52,"column_end":73},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":202},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":23060,"byte_end":23074,"line_start":288,"line_end":288,"column_start":39,"column_end":53},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,114,117,108,101,115,95,97,110,100,95,100,101,99,108,97,114,97,116,105,111,110,115,46,114,115],"byte_start":24767,"byte_end":24781,"line_start":329,"line_end":329,"column_start":52,"column_end":66},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":214},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7848052,"byte_end":7848057,"line_start":9,"line_end":9,"column_start":15,"column_end":20},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,121,111,99,104,105,111,47,114,117,115,116,47,101,120,97,109,112,108,101,95,115,99,97,112,101,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,99,115,115,112,97,114,115,101,114,45,49,49,54,54,101,55,101,50,50,50,97,48,99,54,50,101,47,111,117,116,47,116,111,107,101,110,105,122,101,114,46,114,115],"byte_start":7849228,"byte_end":7849237,"line_start":17,"line_end":17,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":32684,"byte_end":32695,"line_start":26,"line_end":26,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34007,"byte_end":34017,"line_start":67,"line_end":67,"column_start":43,"column_end":53},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":34237,"byte_end":34251,"line_start":77,"line_end":77,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":35488,"byte_end":35502,"line_start":115,"line_end":115,"column_start":13,"column_end":27},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":36136,"byte_end":36146,"line_start":134,"line_end":134,"column_start":13,"column_end":23},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":37018,"byte_end":37029,"line_start":167,"line_end":167,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":38245,"byte_end":38254,"line_start":211,"line_end":211,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":40376,"byte_end":40386,"line_start":271,"line_end":271,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1216},"to":{"krate":2,"index":1940}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":40554,"byte_end":40564,"line_start":280,"line_end":280,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":41641,"byte_end":41647,"line_start":316,"line_end":316,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":71604,"byte_end":71608,"line_start":26,"line_end":26,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":73704,"byte_end":73708,"line_start":99,"line_end":99,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1238},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":74820,"byte_end":74825,"line_start":138,"line_end":138,"column_start":16,"column_end":21},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":1256},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75426,"byte_end":75444,"line_start":162,"line_end":162,"column_start":6,"column_end":24},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":75935,"byte_end":75948,"line_start":185,"line_end":185,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":78640,"byte_end":78662,"line_start":260,"line_end":260,"column_start":39,"column_end":61},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":542},"to":{"krate":0,"index":530}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,108,111,114,46,114,115],"byte_start":78694,"byte_end":78699,"line_start":264,"line_end":264,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":100841,"byte_end":100846,"line_start":56,"line_end":56,"column_start":20,"column_end":25},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1024},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":108340,"byte_end":108355,"line_start":264,"line_end":264,"column_start":13,"column_end":28},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":108581,"byte_end":108596,"line_start":271,"line_end":271,"column_start":28,"column_end":43},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":652},"to":{"krate":2,"index":7656}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":111391,"byte_end":111413,"line_start":359,"line_end":359,"column_start":6,"column_end":28},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":114216,"byte_end":114221,"line_start":429,"line_end":429,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":116939,"byte_end":116951,"line_start":24,"line_end":24,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":121468,"byte_end":121480,"line_start":160,"line_end":160,"column_start":21,"column_end":33},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,117,110,105,99,111,100,101,95,114,97,110,103,101,46,114,115],"byte_start":121605,"byte_end":121617,"line_start":166,"line_end":166,"column_start":16,"column_end":28},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1466},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":123503,"byte_end":123511,"line_start":45,"line_end":45,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":123734,"byte_end":123742,"line_start":55,"line_end":55,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":124052,"byte_end":124060,"line_start":68,"line_end":68,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":124170,"byte_end":124178,"line_start":75,"line_end":75,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":124897,"byte_end":124905,"line_start":101,"line_end":101,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125405,"byte_end":125413,"line_start":120,"line_end":120,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2040}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125619,"byte_end":125627,"line_start":131,"line_end":131,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2012}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125856,"byte_end":125864,"line_start":144,"line_end":144,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2648}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":125963,"byte_end":125971,"line_start":151,"line_end":151,"column_start":26,"column_end":34},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2722}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126066,"byte_end":126074,"line_start":158,"line_end":158,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126178,"byte_end":126186,"line_start":165,"line_end":165,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":7292}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126343,"byte_end":126351,"line_start":172,"line_end":172,"column_start":42,"column_end":50},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126499,"byte_end":126507,"line_start":179,"line_end":179,"column_start":43,"column_end":51},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2472}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126664,"byte_end":126672,"line_start":186,"line_end":186,"column_start":17,"column_end":25},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2424}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126698,"byte_end":126706,"line_start":188,"line_end":188,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2454}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":126843,"byte_end":126851,"line_start":195,"line_end":195,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,115,112,97,114,115,101,114,45,48,46,50,51,46,55,47,115,114,99,47,99,111,119,95,114,99,95,115,116,114,46,114,115],"byte_start":127006,"byte_end":127014,"line_start":202,"line_end":202,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":748},"to":{"krate":2,"index":7716}}]}