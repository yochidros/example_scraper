{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"utf8","disambiguator":[1635844548153701131,13191502146956204020]},"crate_root":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src","external_crates":[{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11381577622635992493,17547473659604595133]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18108793355192929380,16468545247463735764]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11904953375042280309,14371983540252725821]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[1355694319277426326,16064730418872223952]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[16554292665456805706,897773524803637406]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9247162154814293369,8568939183132890470]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10008762999642871283,544601977840758240]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[15792583605743683862,4433965399607837619]}},{"file_name":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[10940074420694136997,2824510269351905908]}}],"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":4518,"line_start":1,"line_end":134,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":10},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27,"byte_end":39,"line_start":3,"line_end":3,"column_start":16,"column_end":28},"name":"LossyDecoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":4518,"line_start":1,"line_end":134,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/yochio/.cargo/registry/src/github.com-1ecc6299db9ec823/utf-8-0.7.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":42},{"krate":0,"index":50},{"krate":0,"index":48},{"krate":0,"index":44},{"krate":0,"index":54},{"krate":0,"index":62},{"krate":0,"index":60},{"krate":0,"index":56},{"krate":0,"index":30},{"krate":0,"index":32}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":10},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":5351,"byte_end":5363,"line_start":23,"line_end":23,"column_start":12,"column_end":24},"name":"LossyDecoder","qualname":"::lossy::LossyDecoder","value":"LossyDecoder {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21}],"decl_id":null,"docs":" A push-based, lossy decoder for UTF-8.\n Errors are replaced with the U+FFFD replacement character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":5540,"byte_end":5543,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<LossyDecoder<F>>::new","value":"fn (push_str: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder from a callback.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":5519,"byte_end":5528,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":6110,"byte_end":6114,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"feed","qualname":"<LossyDecoder<F>>::feed","value":"fn (&mut self, mut input: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Feed one chunk of input into the decoder.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":175,"byte_end":196,"line_start":9,"line_end":9,"column_start":11,"column_end":32},"name":"REPLACEMENT_CHARACTER","qualname":"::REPLACEMENT_CHARACTER","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" The replacement character, U+FFFD. In lossy decoding, insert it for every decoding error.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":31},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":414,"byte_end":421,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::DecodeError::Invalid","value":"DecodeError::Invalid { valid_prefix, invalid_sequence, remaining_input }","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" In lossy decoding insert `valid_prefix`, then `\"\\u{FFFD}\"`,\n then call `decode()` again with `remaining_input`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":39},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":700,"byte_end":710,"line_start":23,"line_end":23,"column_start":5,"column_end":15},"name":"Incomplete","qualname":"::DecodeError::Incomplete","value":"DecodeError::Incomplete { valid_prefix, incomplete_suffix }","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Call the `incomplete_suffix.try_complete` method with more input when available.\n If no more input is available, this is an invalid byte sequence.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":265,"byte_end":276,"line_start":12,"line_end":12,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::DecodeError","value":"DecodeError::{Invalid, Incomplete}","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":39}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":256,"byte_end":791,"line_start":12,"line_end":27,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":834,"byte_end":844,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"Incomplete","qualname":"::Incomplete","value":"Incomplete { buffer, buffer_len }","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":55}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":823,"byte_end":897,"line_start":30,"line_end":33,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":53},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":855,"byte_end":861,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"name":"buffer","qualname":"::Incomplete::buffer","value":"[u8; _]","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":55},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":880,"byte_end":890,"line_start":32,"line_end":32,"column_start":9,"column_end":19},"name":"buffer_len","qualname":"::Incomplete::buffer_len","value":"u8","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":906,"byte_end":912,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn (input: &[u8]) -> Result<&str, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1843,"byte_end":1848,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"empty","qualname":"<Incomplete>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1971,"byte_end":1979,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Incomplete>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2044,"byte_end":2047,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<Incomplete>::new","value":"fn (bytes: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2599,"byte_end":2611,"line_start":91,"line_end":91,"column_start":12,"column_end":24},"name":"try_complete","qualname":"<Incomplete>::try_complete","value":"fn <'input> (&mut self, input: &'input [u8]) -> Option<(Result<&str, &[u8]>, &'input [u8])>","parent":null,"children":[],"decl_id":null,"docs":" * `None`: still incomplete, call `try_complete` again with more input.\n   If no more input is available, this is invalid byte sequence.\n * `Some((result, remaining_input))`: We’re done with this `Incomplete`.\n   To keep decoding, pass `remaining_input` to `decode()`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":5451,"byte_end":5463,"line_start":28,"line_end":28,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":7367,"byte_end":7379,"line_start":85,"line_end":85,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1819,"byte_end":1829,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":5451,"byte_end":5463,"line_start":28,"line_end":28,"column_start":22,"column_end":34},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":10},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,111,115,115,121,46,114,115],"byte_start":7367,"byte_end":7379,"line_start":85,"line_end":85,"column_start":31,"column_end":43},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":10},"to":{"krate":2,"index":2040}},{"span":{"file_name":[47,85,115,101,114,115,47,121,111,99,104,105,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,116,102,45,56,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1819,"byte_end":1829,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":54},"to":{"krate":4294967295,"index":4294967295}}]}